//Marya Poterek
//report.txt for lab 3
//CSE 20312


Internally, this program is structured around two templated classes, Node and List, that together create a linked list in which the individual digits of a given number are stored in separate nodes and connected via pointers. In main, this structure is used to add two numbers. It does so within a while loop that continues to run while input is provided (either from user entry followed by an enter, and then Command + d or an input file specified in the command line). This while loop contributes to the program’s ability to move through all input, but more importantly to dynamic memory management by calling destructors on all List objects within it each time they go out of scope, deallocating them and in the process avoiding memory leaks and making available previously-assigned memory space to the compiler again. Dynamic memory allocation also possesses the ‘delete’ functionality that removes the pointers to the objects as well as the objects themselves, which is crucial in this context. 
In main’s while loop, cin is used to read the set of two numbers into separate string variables. These strings are iterated through into chars, converted to ints, and added to their respective List object (created within the while loop in main) using the pushFront utility function, which calls the utility function newNode as well to set up the memory space and pointers that allow a given number in a given node to be connected to the rest of the list that has been established. These two lists are then passed to the addNumberLists function, which moves through each list while at least one of them still has data in it and uses pointers assigned to the head of each (and later reassigned to the address of the next node) to identify the integer at a given node, add it to the other, and move to the next node for each list. The addition functionality was facilitated via integer variables to account for the sum, or rather the number less than ten that was added to a new list called “temp”, and carry, which accounts for addition within a given magnitude/digit that exceeds 9. If the final value of carry is not 0, it too is added to the list “temp” with the previously-described pushFront functionality. 
Temp is then returned to main, where it is printed. Since the integers that make up the sum have been entered in smallest to largest (i.e. ones place first), printing the linked list starting from the head outputs it in the correct order. Additionally, verification of the program was performed with the “make test” command and visual comparison with
